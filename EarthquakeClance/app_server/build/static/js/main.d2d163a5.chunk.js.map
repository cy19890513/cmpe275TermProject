{"version":3,"sources":["Header.js","EarthquakePerCountry.js","EarthquakePerYear.js","Top10Loss.js","Top10Deaths.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Component","EarthquakePerCountry","_this","state","chart_height","chart_width","data","_this2","axios","get","then","res","map_data","forEach","country","push","convertCountryName","_id","total","setState","catch","error","console","warn","country_name","index_esm","width","height","chartType","mapsApiKey","options","colorAxis","colors","backgroundColor","datalessRegionColor","defaultColor","EarthquakePerYear","year_data","record","toString","loader","chart","title","series","0","axis","axes","y","Temps","label","Top10Loss","chart_data","role","sourceColumn","type","calc","rank","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","toFirstUpperCase","year","total_damage_millions_dollars","err","return","string","toLowerCase","charAt","toUpperCase","slice","chartArea","bar","groupWidth","legend","position","hAxis","vAxis","Top10Deaths","total_deaths","log","App","Grid_default","container","spacing","justify","alignItems","direction","item","xs","src_Header_0","Paper_default","src_EarthquakePerCountry","src_Top10Deaths","src_Top10Loss","src_EarthquakePerYear","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d2d163a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"react-google-charts\";\nimport axios from \"axios\";\nimport './Header.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div className='header'>\n        <h2>Earthquake Records Dashboard</h2>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","/* eslint-disable react/style-prop-object */\nimport React, { Component } from \"react\";\nimport Chart from \"react-google-charts\";\nimport axios from \"axios\";\n\nclass EarthquakePerCountry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chart_height: 0,\n      chart_width: 0\n    }\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:3000/api/num_earthquake_per_country\")\n      .then(res => {\n        const data = res.data;\n        const map_data = [[\"Country\", \"# of Earthquake\"]];\n        data.forEach(country => {\n          map_data.push([this.convertCountryName(country._id), country.total]);\n        });\n        this.setState(() => ({ data: map_data }));\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  }\n\n\n  convertCountryName(country_name) {\n    switch (country_name) {\n      case \"USA\":\n        return \"UNITED STATES\";\n      case \"UK\":\n        return \"UNITED KINGDOM\";\n      default:\n        return country_name;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Number of Earthquake in Record</h3>\n        <Chart\n          width={this.props.chart_width}\n          height={this.props.chart_height}\n          chartType=\"GeoChart\"\n          data={this.state.data}\n          mapsApiKey=\"\"\n          options={{\n            colorAxis: { colors: ['#fff4ed', '#ff5000'] },\n            backgroundColor: '#81d4fa',\n            datalessRegionColor: 'white',\n            defaultColor: 'white',\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EarthquakePerCountry;\n","import React, { Component } from \"react\";\nimport Chart from \"react-google-charts\";\nimport axios from \"axios\";\n\nclass EarthquakePerYear extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:3000/api/num_earthquake_per_year\")\n      .then(res => {\n        const data = res.data;\n        var year_data = [\n          [\n            'Year',\n            \"Earthquake in the Past 10 Years\",\n          ]\n        ];\n        data.forEach(record => {\n          if (record._id != 2019) {\n            year_data.push([record._id.toString(), record.total])\n          }\n        });\n        this.setState(() => ({ data: year_data }));\n        // console.log(\"perYear Data\")\n        // console.log(data);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <Chart\n          width={this.props.chart_width}\n          height={this.props.chart_height}\n          chartType=\"Line\"\n          loader={<div>Loading Chart</div>}\n          data={this.state.data}\n          options={{\n            chart: {\n              title: \"Earthquake in the Past 10 Years\"\n            },\n            series: {\n              // Gives each series an axis name that matches the Y-axis below.\n              0: { axis: \"Earthquake\" }\n            },\n            axes: {\n              // Adds labels to each axis; they don't have to match the axis names.\n              y: {\n                Temps: { label: \"Earthquake (Times)\" }\n              }\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EarthquakePerYear;\n","import React, { Component } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport axios from \"axios\";\r\n\r\nclass Top10Loss extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(\"http://localhost:3000/api/top_losses\").then(res => {\r\n      const data = res.data;\r\n      var chart_data = [\r\n        [\r\n          'Location',\r\n          'Total damage millions dollars $',\r\n          // 'Intensity',\r\n          // 'damage_millions_dollars',\r\n          { role: 'style' },\r\n          {\r\n            sourceColumn: 0,\r\n            role: 'annotation',\r\n            type: 'string',\r\n            calc: 'stringify',\r\n          },\r\n        ]\r\n      ];\r\n\r\n      var rank = 1;\r\n      for (const record of data) {\r\n        chart_data.push([this.toFirstUpperCase(record.country) + \", \" + record.year,\r\n        record.total_damage_millions_dollars,\r\n          // record.intensity,\r\n          'red', \"#\" + rank]);\r\n        rank++;\r\n      }\r\n\r\n      this.setState(() => ({ data: chart_data }));\r\n\r\n    });\r\n  }\r\n\r\n  toFirstUpperCase(string) {\r\n    string = string.toLowerCase();\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Chart\r\n          width={this.props.chart_width}\r\n          height={this.props.chart_height}\r\n          chartType=\"BarChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={this.state.data}\r\n          options={{\r\n            title: 'Top 10 Financial Loss in Earthquake',\r\n            chartArea: { width: '50%' },\r\n            bar: { groupWidth: '85%' },\r\n            legend: { position: 'none' },\r\n            hAxis: {\r\n              title: 'Total Financial Loss'\r\n            },\r\n            vAxis: {\r\n              title: 'Location, Year'\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Top10Loss;\r\n","import React, { Component } from \"react\";\nimport Chart from \"react-google-charts\";\nimport axios from \"axios\";\n\nclass Top10Deaths extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:3000/api/earthquakes_with_top_deaths\").then(res => {\n      const data = res.data;\n      var chart_data = [\n        [\n          'Location',\n          'Total Deaths',\n          { role: 'style' },\n          {\n            sourceColumn: 0,\n            role: 'annotation',\n            type: 'string',\n            calc: 'stringify',\n          },\n        ]\n      ];\n\n      var rank = 1;\n      for (const record of data) {\n        chart_data.push([this.toFirstUpperCase(record.country) + \", \" + record.year, record.total_deaths, 'red', \"#\" + rank]);\n        rank++;\n      }\n\n      this.setState(() => ({ data: chart_data }));\n\n      console.log(\"Deaths data\");\n      console.log(data);\n      console.log(\"Deaths data\");\n    });\n  }\n\n  toFirstUpperCase(string) {\n    string = string.toLowerCase();\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    return (\n      <div>\n        <Chart\n          width={this.props.chart_width}\n          height={this.props.chart_height}\n          chartType=\"BarChart\"\n          loader={<div>Loading Chart</div>}\n          data={this.state.data}\n          options={{\n            title: 'Top 10 Deadiest Earthquake',\n            chartArea: { width: '50%' },\n            bar: { groupWidth: '85%' },\n            legend: { position: 'none' },\n            hAxis: {\n              title: 'Total Deaths'\n            },\n            vAxis: {\n              title: 'Location, Year'\n            },\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Top10Deaths;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport EarthquakePerCountry from \"./EarthquakePerCountry\";\nimport EarthquakePerYear from \"./EarthquakePerYear\";\nimport Top10Loss from \"./Top10Loss\";\nimport Top10Deaths from \"./Top10Deaths\";\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chart_width: 0,\n      chart_height: 0\n    };\n  }\n\n  render() {\n    return (\n      <Grid container spacing={16} justify={\"space-around\"} alignItems={\"stretch\"} direction={\"row\"}>\n        <Grid item xs={12}>\n          <Header />\n        </Grid>\n        <Grid item xs={7} >\n          {/* <div className=\"chart\"> */}\n          <Paper><EarthquakePerCountry chart_width={'100%'} chart_height={'550px'} /></Paper>\n          {/* </div> */}\n        </Grid>\n\n        <Grid container item xs={5} spacing={16} direction={\"column\"} justify=\"space-around\"\n          alignItems=\"stretch\">\n          <Grid item >\n            {/* <div className=\"chart\"> */}\n            <Paper><Top10Deaths chart_width={'100%'} chart_height={'275px'} /></Paper>\n            {/* </div> */}\n          </Grid>\n          <Grid item >\n            {/* <div className=\"chart\"> */}\n            <Paper><Top10Loss chart_width={'100%'} chart_height={'275px'} /></Paper>\n            {/* </div> */}\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n\n          <Paper><EarthquakePerYear chart_width={'100%'} chart_height={'275px'} /></Paper>\n        </Grid >\n      </Grid >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}